---
- name: Ready Clean Machine for demo
  hosts: all
  gather_facts: true
  vars:
     username: ''
     password: ''
     pool_id: ''
     systemrole: "Red Hat Enterprise Server"
     usage: "Dev/Test"
     sla: "Self-Support"

  tasks:
    # Gather the start time to use in a later playbook
    - name: Record the subscription_time
      ansible.builtin.command:
        cmd: "date '+%H:%M:%S'"
      delegate_to: 127.0.0.1
      register: subscription_time_pre
      run_once: true

    # Make the start time available to other playbooks
    - name: Capture the subscription_time
      ansible.builtin.set_stats:
        data:
          subscription_time: "{{ subscription_time_pre.stdout }}"
      run_once: true

    - name: Subscribing to RHEL account just for RHEL
      redhat_subscription:
        state: present
        username: "{{username}}"
        password: "{{password}}"
        pool_ids: "{{pool_id}}"
        syspurpose:
          usage: "{{usage}}"
          role: "{{systemrole}}"
          service_level_agreement: "{{sla}}"
          sync: true
      when: ansiblenode == "false"

    - name: Subscribing to RHEL and Ansible subs
      redhat_subscription:
        state: present
        username: "{{username}}"
        password: "{{password}}"
        pool_ids:
          - 8a85f99a74274534017430bc6dc26484
          - "{{pool_id}}"
      tags:
         - subreg
      when: ansiblenode == "true"

    - name: Rhel 7 specific Repos
      block:
        - name: Disable all Repos
          rhsm_repository:
            name: '*'
            state: disabled
        - name: Enable rhel-7-server-rpms
          rhsm_repository:
            name: rhel-7-server-rpms
            state: enabled
        - name: Enable rhel-7-server-extras-rpms
          rhsm_repository:
            name: rhel-7-server-extras-rpms
            state: enabled
      #  - name: Enable rhel-server-rhscl-7-rpms
      #    rhsm_repository:
      #      name: rhel-server-rhscl-7-rpms
      #      state: enabled
      when:
        - ansible_distribution == "RedHat"
        - ansible_distribution_major_version == "7"
    - name: Rhel 8 specific Repos
      block:
        - name: Disable all Repos
          rhsm_repository:
              name: '*'
              state: disabled
        - name: Enable rhel-8-for-x86_64-baseos-rpms
          rhsm_repository:
              name: rhel-8-for-x86_64-baseos-rpms
              state: enabled
        - name: Enable rhel-8-for-x86_64-appstream-rpms
          rhsm_repository:
              name: rhel-8-for-x86_64-appstream-rpms
              state: enabled
        - name: Enable ansible-2.9-for-rhel-8-x86_64-rpms
          rhsm_repository:
              name: ansible-2.9-for-rhel-8-x86_64-rpms
              state: enabled
          #  - name: Enable rhel-server-rhscl-7-rpms
          #    rhsm_repository:
          #      name: rhel-server-rhscl-7-rpms
          #      state: enabled
      when:
        - ansible_distribution == "RedHat"
        - ansible_distribution_major_version == "8"
    - name: Copy DNS Hosts file for local server from http
      ansible.builtin.get_url:
        url: http://172.16.1.25:8080/hosts
        dest: /etc/hosts
        owner: root
        group: root
        mode: '0644'
        validate_certs: no
      when: ansible_default_ipv4.address is search("172.16.1*")
      tags:
        - copyhost
#    - name: Disable SElinux
#      selinux:
#        policy: targeted
#        state: disabled
#      notify:
#       - Reboot needed
    # Gather the start time to use in a later playbook
    - name: Record the post_install_time
      ansible.builtin.command:
        cmd: "date '+%H:%M:%S'"
      delegate_to: 127.0.0.1
      register: post_install_time_pre
      run_once: true
    # Make the start time available to other playbooks
    - name: Capture the post_install_time
      ansible.builtin.set_stats:
        data:
          post_install_time: "{{ post_install_time_pre.stdout }}"
      run_once: true

    - name: Copy the sshd-banner file into place
      ansible.builtin.copy:
        src: files/sshd-banner
        dest: /etc/ssh/sshd-banner
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx

    - name: Updating the sshd_config file to show the new banner
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#Banner none'
        line: 'Banner /etc/ssh/sshd-banner'
    - name: Copy the new /etc/motd into place
      ansible.builtin.copy:
        src: files/motd
        dest: /etc/motd
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx

    - name: Copy the new /etc/issue into place
      ansible.builtin.copy:
        src: files/issue
        dest: /etc/issue
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx

    - name: Get rid of the cockpit.socket message
      ansible.builtin.file:
        src: /dev/null
        dest: /etc/motd.d/cockpit
        owner: root
        group: root
        state: link
      when: "ansible_distribution_release != 'Maipo'"

    - name: Get rid of the insights client message
      ansible.builtin.file:
        src: /dev/null
        dest: /etc/motd.d/insights-client
        owner: root
        group: root
        state: link
      when: "ansible_distribution_release != 'Maipo'"

    - name: Install My packages I want (insights/net-tools/wget)
      yum:
        name:
          -  insights-client
          -  net-tools
          -  wget
          -  mlocate
          -  nc
          -  telnet
        state: present
    - name: Upgrading all Packages to Latest
      yum:
        name: '*'
        state: latest
    # Gather the start time to use in a later playbook

    - name: Record the insights_time
      ansible.builtin.command:
        cmd: "date '+%H:%M:%S'"
      delegate_to: 127.0.0.1
      register: insights_time_pre
      run_once: true
    # Make the start time available to other playbooks
    - name: Capture the insights_time
      ansible.builtin.set_stats:
        data:
          insights_time: "{{ insights_time_pre.stdout }}"
      run_once: true

    - name: Running insights register
      command: insights-client --register
      register: register_output
      tags:
        - reginsights
    - name: Display Register
      debug:
        msg: "{{ register_output }}"
      tags:
        - reginsights

  handlers:
    - name: Reboot needed
      reboot:
